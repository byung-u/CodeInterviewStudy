#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import numpy as np
import string
from itertools import groupby, count, permutations, combinations
from math import sqrt, floor, ceil, log10, factorial
from functools import reduce

from util import (fib, is_palindromic, prime_sieve,
                  prime_factors, triangle_number,
                  factors, is_prime, pentagonal_number,
                  is_pentagonal, is_hexagonal)


'''
Problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
'''


def p1_great():  # O(1)
    total = 0
    for i in range(1000):
        if i % 3 == 0 or i % 5 == 0:
            total += i
    print('[1]: ', total)


def p1():  # O(1)
    i, j, k = 3, 5, 3 * 5
    total = 0
    while (i < 1000):
        total += i
        i += 3
    while (j < 1000):
        total += j
        j += 5
    while (k < 1000):
        total -= k
        k += 15
    print('[1]: ', total)


'''
Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''


def p2():  # O(1)
    # odd + even  = odd
    # odd + odd = even
    # -----------------------
    # [0][1][2][3][4][5][6][7][8][9]
    #  0  1  1  2  3  5  8 13 21 34
    #           e        e       e
    # index 3 * n is even number
    i = 3
    total = 0
    while (1):
        f = fib(i)
        if f > 4000000:
            break
        total += f
        i += 3
    print('[2]: ', total)


'''
Problem 3
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
'''


def largest_prime_factor(n):  # O(log2)
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:  # n % i == 0
            n //= i
    if n > 1:
        return n
    return i


def p3():
    n = 600851475143
    print('[3]: ', largest_prime_factor(n))


'''
Problem 4
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.
'''


def p4():  # O(1)
    limit = 999 * 999  # two 3-digit numbers (998001)
    for i in range(limit, 1, -1):
        if is_palindromic(str(i)) is False:
            continue
        for j in range(int(sqrt(i)), 0, -1):
            if i % j == 0:
                break
        if j // 1000 == 0 and (i / j) // 1000 == 0:
            break
    print('[4]: ', i)


'''
Problem 5
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
'''


def p5_awesome():
    print('[5]: ', (2**4 * 3**2 * 5 * 7 * 11 * 13 * 17 * 19))
    '''
    https://www.mathsisfun.com/prime-factorization.html
    Use prime factorization
        20 = 2^2 * 5
        19 = 19
        18 = 3^2 * 2
        17 = 17
        16 = 2^4
        15 = 3 * 5
        14 = 2 * 7
        13 = 13
        12 = 2^2 * 3
        11 = 11
        10 = 2 * 5
        9 = 3^2
        8 = 2^3
        7 = 7
        6 = 2 * 3
        5 = 5
        4 = 2^2
        3 = 3
        2 = 2
    '''


def p5():
    # Brute force, too bad logic
    num = 2520
    while (1):
        for d in range(20, 1, -1):
            if num % d != 0:
                break
        if d == 2:
            print('[5]: ', num)
            return
        num += 10


'''
Problem 6
The sum of the squares of the first ten natural numbers is,
12 + 22 + ... + 102 = 385
The square of the sum of the first ten natural numbers is,
(1 + 2 + ... + 10)2 = 552 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

'''


def p6_awesome():
    n = 100
    square_of_sum = (n ** 2 * (n + 1) ** 2) / 4
    sum_of_squares = (n * (n + 1) * ((2 * n) + 1)) / 6
    print('[6]: ', square_of_sum - sum_of_squares)
    '''
    (1 + 2 + ... + n)^2 = n^2 * (n+1)^2 * 1/4
    1^2 + 2^2 + ... + n^2 = n * (n+1) * (2n+1) * 1/6
    '''


def p6_awesome2():
    n = 100
    print('[6]: ', ((3 * (n ** 4)) + (2 * n ** 3) - (3 * n ** 2) - (2 * n)) / 12)
    '''
    ( 3 * n^4 + 2 * n^3 -3 * n^2 - 2 * n )/12
    '''


def p6():  # O(n)
    INPUT = 100
    square_of_sum = (sum(range(1, INPUT + 1)) ** 2)

    add = 1
    square = 0
    sum_of_squares = 0
    for i in range(1, INPUT + 1):
        square += add
        sum_of_squares += square
        add += 2
    print('[6]: ', square_of_sum - sum_of_squares)


'''
Problem 7

By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10,001st prime number?

'''


def p7():
    '''
     http://primes.utm.edu/lists/small/
    '''
    # With sieve algorithm
    sieveSize = 200100
    sieve = [True] * sieveSize
    sieve[0] = False
    sieve[1] = False

    for i in range(2, int(sqrt(sieveSize)) + 1):
        pointer = i * 2
        while pointer < sieveSize:
            sieve[pointer] = False
            pointer += i

    cnt = 0
    for i in range(sieveSize):
        if sieve[i] is True:
            cnt += 1
            if (cnt == 10001):
                print('[7]: ', i)
                break


'''
Problem 8

The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

'''


def p8():
    digit = '''
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
'''
    COUNT = 13
    digit = digit.replace('\n', '')
    print(max([reduce(lambda x, y: x * y, list(map(int, digit[i:i + COUNT]))) for i in range(0, len(digit) - COUNT)]))
    # - Last code -
    # max_num = 0
    # for i in range(0, len(digit)-COUNT):
    #    result = reduce(lambda x, y: x * y, list(map(int, digit[i:i+COUNT])))
    #    if max_num < result:
    #        max_num = result
    # print('[8]: ', max_num)


'''
Problem 9

A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
 a^2 + b^2 = c^2
For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
There exists exactly one Pythagorean triplet for which a + b + c = 1000.Find the product abc.

'''


# http://mathworld.wolfram.com/PythagoreanTriple.html
def gen_prim_pyth_trips(limit=None):
    u = np.mat(' 1  2  2; -2 -1 -2; 2 2 3')
    a = np.mat(' 1  2  2;  2  1  2; 2 2 3')
    d = np.mat('-1 -2 -2;  2  1  2; 2 2 3')
    uad = np.array([u, a, d])
    m = np.array([3, 4, 5])
    while m.size:
        m = m.reshape(-1, 3)
        if limit:
            m = m[m[:, 2] <= limit]
        yield from m
        m = np.dot(m, uad)


def gen_all_pyth_trips(limit):
    for prim in gen_prim_pyth_trips(limit):
        i = prim
        for _ in range(limit // prim[2]):
            yield i
            i = i + prim
            # limit = 1000, prim[2] = 265
            # [ 23 264 265] 1000/265=3
            # [ 23 264 265] -> 1
            # [ 46 528 530] -> 2
            # [ 69 792 795] -> 3


def p9():
    tr = list(gen_all_pyth_trips(1000))
    for t in tr:
        if sum(t) == 1000:
            print('[9]: ', reduce(lambda x, y: x * y, t))


'''
Problem 10

The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.

'''


def p10():
    print('[10] ', sum(prime_sieve(2000000)))


'''
Problem 11

In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?

'''


# 20 x 20
MATRIX20 = [[ 8,  2, 22, 97, 38, 15,  0, 40,  0, 75,  4,  5,  7, 78, 52, 12, 50, 77, 91,  8],
            [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48,  4, 56, 62,  0],
            [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30,  3, 49, 13, 36, 65],
            [52, 70, 95, 23,  4, 60, 11, 42, 69, 24, 68, 56,  1, 32, 56, 71, 37,  2, 36, 91],
            [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],
            [24, 47, 32, 60, 99,  3, 45,  2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],
            [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],
            [67, 26, 20, 68,  2, 62, 12, 20, 95, 63, 94, 39, 63,  8, 40, 91, 66, 49, 94, 21],
            [24, 55, 58,  5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],
            [21, 36, 23,  9, 75,  0, 76, 44, 20, 45, 35, 14,  0, 61, 33, 97, 34, 31, 33, 95],
            [78, 17, 53, 28, 22, 75, 31, 67, 15, 94,  3, 80,  4, 62, 16, 14,  9, 53, 56, 92],
            [16, 39,  5, 42, 96, 35, 31, 47, 55, 58, 88, 24,  0, 17, 54, 24, 36, 29, 85, 57],
            [86, 56,  0, 48, 35, 71, 89,  7,  5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],
            [19, 80, 81, 68,  5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77,  4, 89, 55, 40],
            [ 4, 52,  8, 83, 97, 35, 99, 16,  7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],
            [88, 36, 68, 87, 57, 62, 20, 72,  3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],
            [ 4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18,  8, 46, 29, 32, 40, 62, 76, 36],
            [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74,  4, 36, 16],
            [20, 73, 35, 29, 78, 31, 90,  1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57,  5, 54],
            [ 1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52,  1, 89, 19, 67, 48], ]


def search_max(x, y, max_val, memo):
    if memo[x][y] is True:
        return max_val

    right, down, r_diag, l_diag = (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0), (0, 0, 0, 0)
    ret_right, ret_down, ret_rdiag, ret_ldiag = 0, 0, 0, 0
    if x < 16 and y < 16:
        right = MATRIX20[x][y], MATRIX20[x][y + 1], MATRIX20[x][y + 2], MATRIX20[x][y + 3]
        ret_right = search_max(x + 1, y, max_val, memo)
        memo[x + 1][y] = True

        down = MATRIX20[x][y], MATRIX20[x + 1][y], MATRIX20[x + 2][y], MATRIX20[x + 3][y]
        ret_down = search_max(x, y + 1, max_val, memo)
        memo[x][y + 1] = True
        # right down diagonal
        r_diag = MATRIX20[x][y], MATRIX20[x + 1][y + 1], MATRIX20[x + 2][y + 2], MATRIX20[x + 3][y + 3]
        ret_rdiag = search_max(x + 1, y + 1, max_val, memo)
        memo[x + 1][y + 1] = True
    if (x > 2 and y > -1) and (x < 20 and y < 16):  # left down diagonal
        l_diag = MATRIX20[x][y], MATRIX20[x - 1][y + 1], MATRIX20[x - 2][y + 2], MATRIX20[x - 3][y + 3]
        ret_ldiag = search_max(x - 1, y + 1, max_val, memo)
        memo[x - 1][y + 1] = True

    chk_val = reduce(lambda x, y: x * y, (max(right, down, r_diag, l_diag)))
    if max_val < chk_val:
        max_val = chk_val
        # print(max_val, max(right, down, r_diag))

    chk_val_nested = max(ret_right, ret_down, ret_rdiag, ret_ldiag)
    if max_val < chk_val_nested:
        max_val = chk_val_nested
    return max_val


def p11():
    memo = [[False] * 20] * 20
    result = search_max(0, 0, 0, memo)
    print('[11]: ', result)


'''
Problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

'''


def p12():
    i = 10000
    while(1):
        tn = triangle_number(i)
        pf = prime_factors(tn)
        pf_dup = [len(list(group)) for key, group in groupby(pf)]
        pf_dup = list(map(lambda x: x + 1, pf_dup))
        divisors = reduce(lambda x, y: x * y, pf_dup)
        if divisors >= 500:
            print('[12]: ', tn)
            break
        i += 1


'''
Problem 13

Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

'''


def p13():
    digit = [   37107287533902102798797998220837590246510135740250,
                46376937677490009712648124896970078050417018260538,
                74324986199524741059474233309513058123726617309629,
                91942213363574161572522430563301811072406154908250,
                23067588207539346171171980310421047513778063246676,
                89261670696623633820136378418383684178734361726757,
                28112879812849979408065481931592621691275889832738,
                44274228917432520321923589422876796487670272189318,
                47451445736001306439091167216856844588711603153276,
                70386486105843025439939619828917593665686757934951,
                62176457141856560629502157223196586755079324193331,
                64906352462741904929101432445813822663347944758178,
                92575867718337217661963751590579239728245598838407,
                58203565325359399008402633568948830189458628227828,
                80181199384826282014278194139940567587151170094390,
                35398664372827112653829987240784473053190104293586,
                86515506006295864861532075273371959191420517255829,
                71693888707715466499115593487603532921714970056938,
                54370070576826684624621495650076471787294438377604,
                53282654108756828443191190634694037855217779295145,
                36123272525000296071075082563815656710885258350721,
                45876576172410976447339110607218265236877223636045,
                17423706905851860660448207621209813287860733969412,
                81142660418086830619328460811191061556940512689692,
                51934325451728388641918047049293215058642563049483,
                62467221648435076201727918039944693004732956340691,
                15732444386908125794514089057706229429197107928209,
                55037687525678773091862540744969844508330393682126,
                18336384825330154686196124348767681297534375946515,
                80386287592878490201521685554828717201219257766954,
                78182833757993103614740356856449095527097864797581,
                16726320100436897842553539920931837441497806860984,
                48403098129077791799088218795327364475675590848030,
                87086987551392711854517078544161852424320693150332,
                59959406895756536782107074926966537676326235447210,
                69793950679652694742597709739166693763042633987085,
                41052684708299085211399427365734116182760315001271,
                65378607361501080857009149939512557028198746004375,
                35829035317434717326932123578154982629742552737307,
                94953759765105305946966067683156574377167401875275,
                88902802571733229619176668713819931811048770190271,
                25267680276078003013678680992525463401061632866526,
                36270218540497705585629946580636237993140746255962,
                24074486908231174977792365466257246923322810917141,
                91430288197103288597806669760892938638285025333403,
                34413065578016127815921815005561868836468420090470,
                23053081172816430487623791969842487255036638784583,
                11487696932154902810424020138335124462181441773470,
                63783299490636259666498587618221225225512486764533,
                67720186971698544312419572409913959008952310058822,
                95548255300263520781532296796249481641953868218774,
                76085327132285723110424803456124867697064507995236,
                37774242535411291684276865538926205024910326572967,
                23701913275725675285653248258265463092207058596522,
                29798860272258331913126375147341994889534765745501,
                18495701454879288984856827726077713721403798879715,
                38298203783031473527721580348144513491373226651381,
                34829543829199918180278916522431027392251122869539,
                40957953066405232632538044100059654939159879593635,
                29746152185502371307642255121183693803580388584903,
                41698116222072977186158236678424689157993532961922,
                62467957194401269043877107275048102390895523597457,
                23189706772547915061505504953922979530901129967519,
                86188088225875314529584099251203829009407770775672,
                11306739708304724483816533873502340845647058077308,
                82959174767140363198008187129011875491310547126581,
                97623331044818386269515456334926366572897563400500,
                42846280183517070527831839425882145521227251250327,
                55121603546981200581762165212827652751691296897789,
                32238195734329339946437501907836945765883352399886,
                75506164965184775180738168837861091527357929701337,
                62177842752192623401942399639168044983993173312731,
                32924185707147349566916674687634660915035914677504,
                99518671430235219628894890102423325116913619626622,
                73267460800591547471830798392868535206946944540724,
                76841822524674417161514036427982273348055556214818,
                97142617910342598647204516893989422179826088076852,
                87783646182799346313767754307809363333018982642090,
                10848802521674670883215120185883543223812876952786,
                71329612474782464538636993009049310363619763878039,
                62184073572399794223406235393808339651327408011116,
                66627891981488087797941876876144230030984490851411,
                60661826293682836764744779239180335110989069790714,
                85786944089552990653640447425576083659976645795096,
                66024396409905389607120198219976047599490197230297,
                64913982680032973156037120041377903785566085089252,
                16730939319872750275468906903707539413042652315011,
                94809377245048795150954100921645863754710598436791,
                78639167021187492431995700641917969777599028300699,
                15368713711936614952811305876380278410754449733078,
                40789923115535562561142322423255033685442488917353,
                44889911501440648020369068063960672322193204149535,
                41503128880339536053299340368006977710650566631954,
                81234880673210146739058568557934581403627822703280,
                82616570773948327592232845941706525094512325230608,
                22918802058777319719839450180888072429661980811197,
                77158542502016545090413245809786882778948721859617,
                72107838435069186155435662884062257473692284509516,
                20849603980134001723930671666823555245252804609722,
                53503534226472524250874054075591789781264330331690, ]
    print('[13]: ', str(sum(digit))[:10])


'''
Problem 14

The following iterative sequence is defined for the set of positive integers:
n → n/2 (n is even)n → 3n + 1 (n is odd)
Using the rule above and starting with 13, we generate the following sequence:
13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
Which starting number, under one million, produces the longest chain?
NOTE: Once the chain starts the terms are allowed to go above one million.

'''


def collatz_sequence(x):
    seq = [x]
    if x < 1:
        return []
    while x > 1:
        if x % 2 == 0:
            x = x / 2
        else:
            x = 3 * x + 1
        seq.append(x)    # Added line
    return seq


def p14():
    max_seq = [0, ]
    max_num = 0
    for i in range(1000000, 0, -1):
        if i in max_seq:
            continue
        cs = collatz_sequence(i)
        if len(max_seq) < len(cs):
            max_seq = cs
            max_num = i

    print('[14]: ', max_num)


'''
Problem 15

Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.


How many such routes are there through a 20×20 grid?

'''


def p15():
    '''
    all_path = (m + n)! / (m! * n!)
    '''
    m = 20
    n = 20
    result = factorial(m + n) / (factorial(m) * factorial(n))
    print(result)


'''
Problem 16

215 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
What is the sum of the digits of the number 21000?

'''


def p16():
    print(sum(map(int, str(2 ** 1000))))


'''Problem 17
If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
NOTE: Do not count spaces or hyphens.
For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage.
'''
NUMBER_WORDS = { 1: "one",
                 2: "two",
                 3: "three",
                 4: "four",
                 5: "five",
                 6: "six",
                 7: "seven",
                 8: "eight",
                 9: "nine",
                 10: "ten",
                 11: "eleven",
                 12: "twelve",
                 13: "thirteen",
                 14: "fourteen",
                 15: "fifteen",
                 16: "sixteen",
                 17: "seventeen",
                 18: "eighteen",
                 19: "nineteen",
                 20: "twenty",
                 30: "thirty",
                 40: "forty",
                 50: "fifty",
                 60: "sixty",
                 70: "seventy",
                 80: "eighty",
                 90: "ninety"}


def int_to_english(n):
    english_parts = []
    ones = n % 10
    tens = n % 100
    hundreds = floor(n / 100) % 10
    thousands = floor(n / 1000)

    if thousands:
        english_parts.append(int_to_english(thousands))
        english_parts.append('thousand')
        if not hundreds and tens:
            english_parts.append('and')
    if hundreds:
        english_parts.append(NUMBER_WORDS[hundreds])
        english_parts.append('hundred')
        if tens:
            english_parts.append('and')
    if tens:
        if tens < 20 or ones == 0:
            english_parts.append(NUMBER_WORDS[tens])
        else:
            english_parts.append(NUMBER_WORDS[tens - ones])
            english_parts.append(NUMBER_WORDS[ones])
    return ' '.join(english_parts)


def p17():
    total = 0
    for i in range(1, 1001):
        eng_num = int_to_english(i)
        # print(eng_num)
        eng_num = eng_num.replace(' ', '')
        total += len(eng_num)
    print('[17]: ', total)


'''
Problem 18
By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
3
7 4
2 4 6
8 5 9 3
That is, 3 + 7 + 4 + 9 = 23.
Find the maximum total from top to bottom of the triangle below:

NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route.
However, Problem 67, is the same challenge with a triangle containing one-hundred rows;
it cannot be solved by brute force, and requires a clever method! ;o)
'''

triangle_digit = [
    [75],
    [95, 64],
    [17, 47, 82],
    [18, 35, 87, 10],
    [20,  4, 82, 47, 65],
    [19,  1, 23, 75,  3, 34],
    [88,  2, 77, 73,  7, 63, 67],
    [99, 65,  4, 28,  6, 16, 70, 92],
    [41, 41, 26, 56, 83, 40, 80, 70, 33],
    [41, 48, 72, 33, 47, 32, 37, 16, 94, 29],
    [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14],
    [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57],
    [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48],
    [63, 66,  4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31],
    [ 4, 62, 98, 27, 23,  9, 70, 98, 73, 93, 38, 53, 60,  4, 23],
]


def search_max_sum(x, y, total, max_total):
    if y == 14:
        return max_total
    down = triangle_digit[y + 1][x]
    r_down = triangle_digit[y + 1][x + 1]
    td = total + down
    trd = total + r_down

    if max_total < max(td, trd):
        max_total = max(td, trd)

    ret_down = search_max_sum(x, y + 1, td, max_total)
    ret_rdown = search_max_sum(x + 1, y + 1, trd, max_total)
    if max_total < max(ret_down, ret_rdown):
        max_total = max(ret_down, ret_rdown)
    return max_total


def p18():
    max_total = 0
    ret = search_max_sum(0, 0, triangle_digit[0][0], max_total)
    print('[18]: ', ret)


'''
Problem 19
You are given the following information, but you may prefer to do some research for yourself.
1 Jan 1900 was a Monday.
Thirty days has September, April, June and November.
All the rest have thirty-one,
Saving February alone, Which has twenty-eight, rain or shine.
And on leap years, twenty-nine.
A leap year occurs on any year evenly divisible by 4,
but not on a century unless it is divisible by 400.
How many Sundays fell on the first of the month during the twentieth century
(1 Jan 1901 to 31 Dec 2000)?
'''


def p19():
    cnt = 0
    start_day = 1  # 1 ~ 7, monday to sunday
    for year in range(1900, 2001):
        for month in range(1, 13):
            if (month == 4 or month == 6 or month == 9 or month == 11):
                day = 30
            elif (month == 2):
                day = 28
                if year % 4 == 0:
                    day = 29
                    if year % 100 == 0:
                        day = 28
                        if year % 400 == 0:
                            day = 29
            else:
                day = 31
            start_day += day % 7
            if start_day > 7:
                start_day -= 7
            if start_day == 7:
                if year == 1900:
                    continue
                else:
                    cnt += 1
    print('[19]: ', cnt)


'''
Problem 20
n! means n × (n − 1) × ... × 3 × 2 × 1
For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
Find the sum of the digits in the number 100!
'''


def p20():
    print('[20]: ', sum(map(int, (str(factorial(100))))))


'''
Problem 21
Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.
For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
Evaluate the sum of all the amicable numbers under 10000.
'''


def p21():
    amicable_pair = []
    for a in range(1, 10000):
        if a in amicable_pair:
            continue
        factor_a = factors(a)
        b = sum(list(factor_a)) - a
        if a == b:  # where a ≠ b
            continue

        factor_b = factors(b)
        amicable_b = sum(list(factor_b)) - b
        if amicable_b == a:
            amicable_pair.append(a)
            amicable_pair.append(b)
    print('[21]: ', sum(amicable_pair))


'''
Problem 22
Using names.txt (right click and 'Save Link/Target As...'),
a 46K text file containing over five-thousand first names,
begin by sorting it into alphabetical order.
Then working out the alphabetical value for each name,
multiply this value by its alphabetical position in the list to obtain a name score.
For example, when the list is sorted into alphabetical order,
COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list.
So, COLIN would obtain a score of 938 × 53 = 49714.
What is the total of all the name scores in the file?
'''


def get_alphabet_position_dict():
    a = string.ascii_uppercase
    b = list(range(1, 27))
    return dict(zip(a, b))


def get_name_worth(d, aa):
    worth = 0
    for i in range(len(aa)):
        worth += d[aa[i]]
    return worth


def p22():
    total = 0
    position_dict = get_alphabet_position_dict()

    with open('names.txt') as f:
        for line in f:
            names = line.replace('"', '').replace('\n', '').split(',')
    names = sorted(names)
    for idx, name in enumerate(names):
        worth = get_name_worth(position_dict, name)
        total += ((idx + 1) * worth)

    print('[22]: ', total)


'''
Problem 23
A perfect number is
a number for which the sum of its proper divisors is exactly equal to the number.
For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28,
which means that 28 is a perfect number.
A number n is called deficient
if the sum of its proper divisors is less than n and it is called abundant
if this sum exceeds n.
As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16,
the smallest number that can be written as the sum of two abundant numbers is 24.
By mathematical analysis,
it can be shown that all integers greater than 28123 can be written
as the sum of two abundant numbers.
However, this upper limit cannot be reduced any further by analysis
even though it is known that the greatest number
that cannot be expressed as the sum of two abundant numbers is less than this limit.
Find the sum of all the positive integers which cannot be written
as the sum of two abundant numbers.
'''


def is_abundant(n):
    results = set()
    for i in range(1, int(sqrt(n)) + 1):
        if n % i == 0:
            results.add(i)
            results.add(n // i)

    divisors_sum = sum(list(results)) - n
    return divisors_sum > n


def p23():  # O(n^2)
    total = 0
    abundants = list(x for x in range(1, 28123 + 1) if is_abundant(x))
    abundants_sum = set()
    for i in range(0, len(abundants)):
        for j in range(i, len(abundants)):
            abundants_sum.add(abundants[i] + abundants[j])

    for i in range(1, 28123 + 1):
        if i in abundants_sum:
            continue
        total += i
    print('[23]: ', total)


'''
Problem 24
A permutation is an ordered arrangement of objects.
For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4.
If all of the permutations are listed numerically or alphabetically,
we call it lexicographic order.
The lexicographic permutations of 0, 1 and 2 are:
012   021   102   120   201   210
What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
'''


def permutations_self(head, tail=''):
    perms = []
    len_h = len(head)
    if len_h == 0:
        perms.append(tail)
    else:
        for i in range(len_h):
            p = permutations_self(head[0:i] + head[i + 1:], tail + head[i])
            perms.extend(p)
    return perms


# https://stackoverflow.com/questions/104420/how-to-generate-all-permutations-of-a-list-in-python
def p24():
    print('[24]: ', ''.join(sorted(list(permutations(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], 10)))[1000000 - 1]))


'''
Problem 25
The Fibonacci sequence is defined by the recurrence relation:
Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
Hence the first 12 terms will be:
F1 = 1
F2 = 1
F3 = 2
F4 = 3
F5 = 5
F6 = 8
F7 = 13
F8 = 21
F9 = 34
F10 = 55
F11 = 89
F12 = 144
The 12th term, F12, is the first term to contain three digits.
What is the index of the first term in the Fibonacci sequence to contain 1000 digits?
'''


def fib_number_of_digits(n):
    '''
    http://www.geeksforgeeks.org/finding-number-of-digits-in-nth-fibonacci-number/

    fib(n) = (Φn - Ψ-n) / √5
    where
        Φ = (1 + √5) / 2
        Ψ = (1 - √5) / 2

    The above formula can be simplified,
    fib(n) = round(Φn / √ 5)
    Here round function indicates nearest integer.

    Count of digits in Fib(n) = Log10Fib(n)
                              = Log10(Φn / √ 5)
                              = n*Log10(Φ) - Log10√5
                              = n*Log10(Φ) - (Log105)/2
    '''
    PHI = 1.6180339887498948
    if n == 1:
        return 1

    d = (n * log10(PHI)) - (log10(5) / 2)
    return ceil(d)


def p25():
    i = 1
    while(1):
        fib_digit = fib_number_of_digits(i)
        if fib_digit >= 1000:
            print('[25]: ', i)
            break
        i += 1


'''
Problem 26
A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:

1/2= 0.5
1/3= 0.(3)
1/4= 0.25
1/5= 0.2
1/6= 0.1(6)
1/7= 0.(142857)
1/8= 0.125
1/9= 0.(1)
1/10= 0.1

Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.
Find the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.


n  1/n   Before / Repeating part                       F U
------------------------------------------------------------
1  1/1    1.      / 0...                               0 1
2  1/2*   0.5     / 0...                               1 1
3  1/3*   0.      / 3...                               0 1
4  1/4    0.25    / 0...                               2 1
5  1/5*   0.2     / 0...                               1 1
6  1/6    0.1     / 6...                               1 1
7  1/7*   0.      / 142857...                          0 6
8  1/8    0.125   / 0...                               3 1
9  1/9    0.      / 1...                               0 1
10 1/10   0.1     / 0...                               1 1
11 1/11*  0.      / 09...                              0 2
12 1/12   0.08    / 3...                               2 1
13 1/13*  0.      / 076923...                          0 6
14 1/14   0.0     / 714285...                          1 6
15 1/15   0.0     / 6...                               1 1
16 1/16   0.0625  / 0...                               4 1
17 1/17*  0.      / 0588235294117647...                0 16
18 1/18   0.0     / 5...                               1 1
19 1/19*  0.      / 052631578947368421...              0 18
20 1/20   0.05    / 0...                               2 1
21 1/21   0.      / 047619...                          0 6
22 1/22   0.0     / 45...                              1 2
23 1/23*  0.      / 0434782608695652173913...          0 22
24 1/24   0.041   / 6...                               3 1
25 1/25   0.04    / 0...                               2 1
26 1/26   0.      / 0384615...                         0 7
27 1/27   0.      / 037...                             0 3
28 1/28   0.03    / 571428...                          2 6
29 1/29*  0.      / 0344827586206896551724137931...    0 28
30 1/30   0.0     / 3...                               1 1
31 1/31*  0.      / 032258064516129032258064516129...  0 30
32 1/32*  0.03125 / 0...                               5 1

60 1/60   0.01    / 6...                               2 1
64 1/64   0.015625/ 0...                               6 1
360 1/360 0.002   / 7...                               3 1


http://mathforum.org/library/drmath/view/51549.html

    2) Tails can only grow to a maximum length equal to a prime number minus one.

'''


def p26():
    possible_list = prime_sieve(1001)[::-1]
    for d in possible_list:
        period = 1
        while pow(10, period, d) != 1:  # prime number minus one
            period += 1
        if d - 1 == period:
            break
    print('[26]: ', d)


'''
Problem 27
Euler discovered the remarkable quadratic formula:
    n^2 + n + 41
It turns out that the formula will produce
40 primes for the consecutive integer values 0~39.
However, when n = 40, 40^2 + 40 + 41 = 40(40 + 1) + 41 is divisible by 41,
and certainly when n = 41, 41^2 + 41 + 41 is clearly divisible by 41.
The incredible formula n^2 - 79n + 1601 was discovered,
which produces 80 primes for the consecutive values 0~79.
The product of the coefficients, −79 and 1601, is −126479.
Considering quadratics of the form:

        n^2 + an + b,

where |a| < 1000 and |b| <= 1000 where |n| is the modulus/absolute value of n
e.g. |11| = 11 and |-4| = 4

Find the product of the coefficients, a and b,
for the quadratic expression that produces the maximum number of primes
for consecutive values of n, starting with n = 0.
'''


def quadratic_formula(a, b):
    n = 0
    while(1):
        quad = (n ** 2) + (a * n) + b
        ret = is_prime(quad)
        if ret is False:
            return n
        n += 1
    return 0


def p27():
    primes = prime_sieve(1000)
    consecutive = 0
    max_a, max_b = 0, 0
    for a in range(-999, 1000):
        for b in primes:
            consecutive_values = quadratic_formula(a, b)
            if consecutive < consecutive_values:
                consecutive = consecutive_values
                max_a = a
                max_b = b
                print(consecutive, a, b)

            consecutive_values = quadratic_formula(a, -1 * b)
            if consecutive < consecutive_values:
                consecutive = consecutive_values
                max_a = a
                max_b = b
                print(consecutive, a, -1 * b)

    print('[27]: ', max_a * max_b)


def p27_great():
    nmax = 0
    for b in prime_sieve(1000):
        for a in range(-b + 2, 0, 2):  # use Lou-John’s expression template
            n = 1
            while(is_prime(n * n + a * n + b)):
                n += 1
            if n > nmax:
                nmax, p = n, (a, b)
    print(nmax, p[0] * p[1])


'''
Problem 28
Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:
21 22 23 24 25
20  7  8  9 10
19  6  1  2 11
18  5  4  3 12
17 16 15 14 13
It can be verified that the sum of the numbers on the diagonals is 101.
What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?
'''

LEFT = 0
DOWN = 1
RIGHT = 2
UP = 3
VAL = 31  # n by n


# FIXME : max 31 x 31
def fill_matrix(matrix, x, y, value, walk, gap, direct):

    matrix[x][y] = value
    if x == VAL - 1 and y == VAL - 1:
        return matrix

    value += 1
    if direct == RIGHT:
        if walk == gap:
            return fill_matrix(matrix, x, y - 1, value, 1, gap, DOWN)
        else:
            walk += 1
            return fill_matrix(matrix, x + 1, y, value, walk, gap, RIGHT)
    elif direct == DOWN:
        if walk == gap:
            gap += 1
            return fill_matrix(matrix, x - 1, y, value, 1, gap, LEFT)
        else:
            walk += 1
            return fill_matrix(matrix, x, y - 1, value, walk, gap, DOWN)
    elif direct == LEFT:
        if walk == gap:
            return fill_matrix(matrix, x, y + 1, value, 1, gap, UP)
        else:
            walk += 1
            return fill_matrix(matrix, x - 1, y, value, walk, gap, LEFT)
    elif direct == UP:
        if walk == gap:
            gap += 1
            return fill_matrix(matrix, x + 1, y, value, 1, gap, RIGHT)
        else:
            walk += 1
            return fill_matrix(matrix, x, y + 1, value, walk, gap, UP)


def test_28():
    center_x = VAL // 2
    center_y = VAL // 2
    matrix = np.zeros((VAL, VAL))
    matrix[center_x][center_y] = 1
    ret = fill_matrix(matrix, center_x + 1, center_y, 2, 1, 1, RIGHT)
    print(ret)


def get_diagoanl_sum(n, max_n, add_n):
    term = 8
    i = 1
    d_sum = n
    while(n < max_n):
        n = n + (i * term) + add_n
        d_sum += n
        i += 1
    return d_sum


def p28():
    matrix = 1001
    total = 1

    # left down
    ld_max = matrix * matrix - (3 * (matrix - 1))
    total += get_diagoanl_sum(3, ld_max, 2)

    # right up
    ru_max = matrix * matrix - (1 * (matrix - 1))
    total += get_diagoanl_sum(7, ru_max, 6)

    # right down
    rd_max = matrix * matrix
    total += get_diagoanl_sum(9, rd_max, 8)

    # left up
    lu_max = matrix * matrix - (2 * (matrix - 1))
    total += get_diagoanl_sum(5, lu_max, 4)

    print('[28]: ', total)


'''
Problem 29
Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125
If they are then placed in numerical order, with any repeats removed,
we get the following sequence of 15 distinct terms:
4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
How many distinct terms are in the sequence generated
by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
'''


def p29():  # O(n^2)
    seq = set()
    for a in range(2, 100 + 1):
        for b in range(2, 100 + 1):
            comb = a ** b
            seq.add(comb)
    print('[29]: ', len(seq))


'''
Problem 30
Surprisingly there are only three numbers that can be written as
the sum of fourth powers of their digits:
    1634 = 1^4 + 6^4 + 3^4 + 4^4
    8208 = 8^4 + 2^4 + 0^4 + 8^4
    9474 = 9^4 + 4^4 + 7^4 + 4^4
As 1 = 1^4 is not a sum it is not included.
The sum of these numbers is 1634 + 8208 + 9474 = 19316.
Find the sum of all the numbers that can be written as
the sum of fifth powers of their digits.
'''


def p30():
    '''
    [0^5] 0
    [1^5] 1
    [2^5] 32
    [3^5] 243
    [4^5] 1024
    [5^5] 3125
    [6^5] 7776
    [7^5] 16807
    [8^5] 32768
    [9^5] 59049
    '''
    MAX_DIGIT = 6 * (9 ** 5)
    result = 0
    for i in range(MAX_DIGIT, 1, -1):
        digits = list(map(int, str(i)))
        total = 0
        for j in digits:
            total += j ** 5
        if total == i:
            result += i
    print('[30]: ', result)


'''
Problem 31
In England the currency is made up of pound, £, and pence, p,
and there are eight coins in general circulation:
1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).
It is possible to make £2 in the following way:
    1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
How many different ways can £2 be made using any number of coins?
'''


def p31():
    total = 0
    for c1 in range(0, 201):  # 1
        for c2 in range(0, 201, 2):  # 2
            if c1 + c2 > 200:
                break
            for c3 in range(0, 201, 5):  # 5
                if c1 + c2 + c3 > 200:
                    break
                for c4 in range(0, 201, 10):  # 10
                    if c1 + c2 + c3 + c4 > 200:
                        break
                    for c5 in range(0, 201, 20):  # 20
                        if c1 + c2 + c3 + c4 + c5 > 200:
                            break
                        for c6 in range(0, 201, 50):  # 50
                            if c1 + c2 + c3 + c4 + c5 + c6 > 200:
                                break
                            for c7 in range(0, 201, 100):  # 100
                                if c1 + c2 + c3 + c4 + c5 + c6 + c7 > 200:
                                    break
                                for c8 in range(0, 201, 200):  # 200
                                    if c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 > 200:
                                        break
                                    if c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 == 200:
                                        print(c1, c2, c3, c4, c5, c6, c7, c8)
                                        total += 1
    print(total)


'''
Problem 32
We shall say that an n-digit number is pandigital
if it makes use of all the digits 1 to n exactly once;
for example, the 5-digit number, 15234, is 1 through 5 pandigital.
The product 7254 is unusual, as the identity, 39 × 186 = 7254,
containing multiplicand, multiplier, and product is 1 through 9 pandigital.
Find the sum of all products whose multiplicand/multiplier/product identity
can be written as a 1 through 9 pandigital.
HINT: Some products can be obtained in
      more than one way so be sure to only include it once in your sum.
'''


def is_pandigital(n, s=9):
    n = str(n)
    # print('1234567890'[:9])
    # print(not '1234567890'[:9].strip('123456789'))
    return len(n) == s and not '1234567890'[:s].strip(n)


def p32():
    '''
    1 through 9
        O * OOOO = OOOO
        OO * OOO = OOOO

    4 * 1738 = 6952
    4 * 1963 = 7852
    12 * 483 = 5796
    18 * 297 = 5346
    27 * 198 = 5346  # not add
    28 * 157 = 4396
    39 * 186 = 7254
    42 * 138 = 5796  # not add
    48 * 159 = 7632
    '''
    total = set()
    for i in range(1, 10):
        for j in range(1000, 10000):
            if is_pandigital(str(i) + str(j) + str(i * j)):
                total.add(i * j)

    for i in range(10, 101):
        for j in range(100, 1000):
            if is_pandigital(str(i) + str(j) + str(i * j)):
                total.add(i * j)

    print('[32]: ', sum(total))


'''
Problem 33
The fraction 49/98 is a curious fraction,
as an inexperienced mathematician in attempting to simplify it
may incorrectly believe that 49/98 = 4/8,
which is correct, is obtained by cancelling the 9s.
We shall consider fractions like, 30/50 = 3/5, to be trivial examples.
There are exactly four non-trivial examples of this type of fraction,
less than one in value, and containing two digits in the numerator and denominator.
If the product of these four fractions is given in its lowest common terms,
find the value of the denominator.
'''


def p33():
    d = 1
    for i in range(10, 100):
        for j in range(i + 1, 100):
            if i % 10 == j // 10:
                if j % 10 == 0:
                    continue
                if i / j == ((i // 10) / (j % 10)):
                    print('%d / %d' % (i, j))
                    d *= (j / i)
    print('[33]: ', d)


'''
Problem 34
145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.
Find the sum of all numbers which are equal to the sum of the factorial of their digits.
Note: as 1! = 1 and 2! = 2 are not sums they are not included.
'''


def p34():
    # [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]
    retval = []
    factorials = [1] * 1
    for i in range(1, 10):
        factorials.append(factorial(i))

    for i in range(2177280, 2, -1):
        nums = list(map(int, str(i)))
        total = 0
        for num in nums:
            total += factorials[num]
        if i == total:
            retval.append(i)

    print('[34]: ', sum(retval))


'''
Problem 35
The number, 197, is called a circular prime
because all rotations of the digits: 197, 971, and 719, are themselves prime.
There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
How many circular primes are there below one million?
'''


def is_circular_prime(a):
    n = 1
    while(1):
        temp = []
        div, mod = divmod(a, pow(10, n))
        if div == 0:
            return True
        temp.append(str(mod))
        temp.append(str(div))
        c_prime = int(''.join(temp))
        if is_prime(c_prime) is False:
            return False
        n += 1
    return True


def p35():
    ret = []
    primes = prime_sieve(1000000)
    for prime in primes:
        if is_circular_prime(prime):
            ret.append(prime)
    print('[35]: ', len(ret))


'''
Problem 36
The decimal number, 585 = 1001001001(2) (binary), is palindromic in both bases.
Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.
(Please note that the palindromic number, in either base, may not include leading zeros.)
'''


def p36():
    ret = []
    for i in range(1000001, 0, -1):
        if is_palindromic(str(i)) and is_palindromic((str(bin(i))[2:])):
            ret.append(i)
    print('[36]: ', sum(ret))


'''
Problem 37
The number 3797 has an interesting property.
Being prime itself, it is possible to continuously remove digits from left to right,
and remain prime at each stage: 3797, 797, 97, and 7.
Similarly we can work from right to left: 3797, 379, 37, and 3.
Find the sum of the only eleven primes that are both truncatable from left to right and right to left.
NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
'''


def is_truncable_prime(prime):
    n = 1
    while (1):
        div, mod = divmod(prime, pow(10, n))
        if div == 0:
            return True
        if is_prime(div) is False:
            return False
        if is_prime(mod) is False:
            return False
        n += 1
    return True


def p37():
    ret = []
    primes = prime_sieve(1000000)
    for prime in primes[4:]:  # 2, 3, 5, 7 not considered
        if (is_truncable_prime(prime)):
            ret.append(prime)
    print('[37]: ', sum(ret))


'''
Problem 38
Take the number 192 and multiply it by each of 1, 2, and 3:
192 × 1 = 192
192 × 2 = 384
192 × 3 = 576
By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)
The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).
What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, ... , n) where n > 1?
'''


def p38():
    ret = []
    for i in range(5678, 9876):
        if is_pandigital(str(i) + str(2 * i)):
            ret.append(str(i) + str(2 * i))
    print('[38]: ', max(ret))


'''
Problem 39
If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.
{20,48,52}, {24,45,51}, {30,40,50}
For which value of p ≤ 1000, is the number of solutions maximised?
'''


def p39():
    # http://mathworld.wolfram.com/PythagoreanTriple.html
    ret = []
    for a in range(3, 500):
        for b in range(a + 1, 500):
            square_a = a * a
            square_b = b * b
            c = sqrt(square_a + square_b)
            if c.is_integer() is False:
                continue
            if a + b + c > 1000:
                break
            if square_a + square_b == c * c:
                ret.append(sum([a, b, c]))
    freqs = {}
    for r in ret:
        freqs[r] = freqs.get(r, 0) + 1
    print('[39]: ', max(freqs, key=freqs.get))


'''
Problem 40
An irrational decimal fraction is created by concatenating the positive integers:
0.123456789101112131415161718192021...
It can be seen that the 12th digit of the fractional part is 1.
If dn represents the nth digit of the fractional part, find the value of the following expression.
d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000
'''


def p40():
    arr_d = [1, 10, 100, 1000, 10000, 100000, 1000000]
    champ = []
    ret = 1
    for i in range(1, 300000):
        champ.append(i)
    champernowne = ''.join(map(str, champ))
    for d in arr_d:
        ret *= int(champernowne[d - 1])
    print('[40]: ', ret)


'''
Problem 41
We shall say that an n-digit number is pandigital
if it makes use of all the digits 1 to n exactly once.
For example, 2143 is a 4-digit pandigital and is also prime.
What is the largest n-digit pandigital prime that exists?
'''


def p41():
    ret = []
    pandigit = 123456789
    for n in range(9, 1, -1):
        for p in permutations(str(pandigit), n):
            num = int(''.join(p))
            if is_prime(num):
                ret.append(num)
        pandigit //= 10
    print('[41]: ', max(ret))


'''
Problem 42
The nth term of the sequence of triangle numbers is given by, tn = ½n(n+1);
so the first ten triangle numbers are:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
By converting each letter in a word to a number corresponding to its alphabetical position and
adding these values we form a word value.
For example, the word value for SKY is 19 + 11 + 25 = 55 = t10.
If the word value is a triangle number then we shall call the word a triangle word.
Using words.txt (right click and 'Save Link/Target As...'),
a 16K text file containing nearly two-thousand common English words, how many are triangle words?
'''


def get_triangle_num_list():
    ret = []
    for i in range(50):
        ret.append(triangle_number(i))
    return ret


def p42():
    total = 0
    position_dict = get_alphabet_position_dict()
    triangle_num_list = get_triangle_num_list()

    with open('words.txt') as f:
        for line in f:
            names = line.replace('"', '').replace('\n', '').split(',')
    for name in names:
        val = get_name_worth(position_dict, name)
        if val in triangle_num_list:
            total += 1
    print('[42]: ', total)


'''
Problem 43
The number, 1406357289, is a 0 to 9 pandigital number because
it is made up of each of the digits 0 to 9 in some order,
but it also has a rather interesting sub-string divisibility property.
Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:
d2d3d4=406 is divisible by 2
d3d4d5=063 is divisible by 3
d4d5d6=635 is divisible by 5
d5d6d7=357 is divisible by 7
d6d7d8=572 is divisible by 11
d7d8d9=728 is divisible by 13
d8d9d10=289 is divisible by 17
Find the sum of all 0 to 9 pandigital numbers with this property.
'''


def p43():
    ret = []
    pandigit = 1234567890
    perms = permutations(str(pandigit), 10)
    for p in perms:
        num = ''.join(p)
        if ( int(num[1:4]) % 2 == 0 and
             int(num[2:5]) % 3 == 0 and
             int(num[3:6]) % 5 == 0 and
             int(num[4:7]) % 7 == 0 and
             int(num[5:8]) % 11 == 0 and
             int(num[6:9]) % 13 == 0 and
             int(num[7:10]) % 17 == 0):
            ret.append(int(num))
    print('[43]: ', sum(ret))


'''
Problem 44
Pentagonal numbers are generated by the formula,
Pn=n(3n−1)/2. The first ten pentagonal numbers are:
1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
Find the pair of pentagonal numbers, Pj and Pk,
for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
'''


def p44_great():
    ''' Pn=n(3n-1)/2 Find Pn1,Pn2,Pn3,Pn4 with Pn1+Pn2 = Pn3 and Pn1-Pn2 == Pn4
        From this follows:
            Pn3 > Pn1 > Pn2,
            Pn1 > Pn4,
            so use Pn3 to build a set of Pn's.
        By adding
            Pn1+Pn2 = Pn3 and
          + Pn1-Pn2 = Pn4
         => 2Pn1 = Pn3 + Pn4

         So Pn1 = (Pn3 + Pn4)/2
            Pn2 = Pn3 - Pn1
    '''
    penta_iter = (n * (3 * n - 1) / 2 for n in count(1))
    penta_set = set()
    for Pn3 in penta_iter:
        penta_set.add(Pn3)
        for Pn4 in (x for x in penta_set if x < Pn3):
            Pn1 = 0.5 * (Pn3 + Pn4)
            if Pn1 in penta_set:
                Pn2 = Pn3 - Pn1
                if Pn2 in penta_set:
                    return abs(int(Pn1 - Pn2))


def p44():  # worst
    minimised = 0
    pentagonals = []
    for i in range(1, 2500):
        pentagonals.append(pentagonal_number(i))

    for i in range(1, len(pentagonals)):
        for j in range(i + 1, len(pentagonals)):
            diff_penta = abs(pentagonals[i] - pentagonals[j])
            if diff_penta not in pentagonals:
                continue
            if (pentagonals[i] + pentagonals[j]) not in pentagonals:
                continue
            print(pentagonals[i], pentagonals[j])
            if minimised > diff_penta or minimised == 0:
                minimised = diff_penta
                ret = (pentagonals[i], pentagonals[j])
    print('[44]: ', abs(ret[0] - ret[1]))


'''
Problem 45
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle
 
Tn=n(n+1)/2
 
1, 3, 6, 10, 15, ...
Pentagonal
 
Pn=n(3n−1)/2
 
1, 5, 12, 22, 35, ...
Hexagonal
 
Hn=n(2n−1)
 
1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.
Find the next triangle number that is also pentagonal and hexagonal.
'''


def p45():
    n = 286
    while (1):
        tn = triangle_number(n)
        if is_pentagonal(tn) and is_hexagonal(tn):
            print('[45]: ', tn)
            break
        n += 1


'''
Problem 46
It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.
9 = 7 + 2×1^2
15 = 7 + 2×2^2
21 = 3 + 2×3^2
25 = 7 + 2×3^2
27 = 19 + 2×2^2
33 = 31 + 2×1^2
It turns out that the conjecture was false.
What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?
'''


def p46():
    for i in filter(lambda x: x % 2 == 1, count(9, 1)):
        if is_prime(i):
            continue
        for j in range(i - 1, -1, -1):
            if is_prime(j):
                if sqrt((i - j) / 2).is_integer():
                    break
        if j == 0:
            print('[46]: ', i)
            return


'''
Problem 47
The first two consecutive numbers to have two distinct prime factors are:
14 = 2 × 7
15 = 3 × 5
The first three consecutive numbers to have three distinct prime factors are:
644 = 2² × 7 × 23
645 = 3 × 5 × 43
646 = 2 × 17 × 19.
Find the first four consecutive integers to have four distinct prime factors each.
What is the first of these numbers?
'''


def prime_factors_not_dup(n):
    i = 2
    factors = set()
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.add(i)
    if n > 1:
        factors.add(n)
    return factors


def p47():
    for i in count(1000, 1):
        if len(prime_factors_not_dup(i)) == 4:
            if len(prime_factors_not_dup(i + 1)) == 4:
                if len(prime_factors_not_dup(i + 2)) == 4:
                    if len(prime_factors_not_dup(i + 3)) == 4:
                        print('[47]: ', i)
                        return
                    else:
                        i += 4
                        continue
                else:
                    i += 3
                    continue
            else:
                i += 2
                continue


'''
Problem 48
The series, 1^1 + 2^2 + 3^3 + ... + 10^10 = 10405071317.
Find the last ten digits of the series, 1^1 + 2^2 + 3^3 + ... + 1000^1000.
'''


def pow_self(base, exponent):
    if exponent == 0:
        return 1
    elif exponent < 0:
        return 1 / pow_self(base, -exponent)
    elif exponent % 2 == 0:
        half_pow = pow_self(base, exponent // 2)
        return half_pow * half_pow
    else:
        return base * pow_self(base, exponent - 1)


def p48():
    # https://stackoverflow.com/questions/2882706/how-can-i-write-a-power-function-myself
    print(str(sum([pow_self(x, x) for x in range(1, 1001)]))[-10:])


'''
Problem 49
The arithmetic sequence, 1487, 4817, 8147,
in which each of the terms increases by 3330, is unusual in two ways:
(i) each of the three terms are prime, and,
(ii) each of the 4-digit numbers are permutations of one another.
There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes,
exhibiting this property, but there is one other 4-digit increasing sequence.
What 12-digit number do you form by concatenating the three terms in this sequence?
'''


def prime_sieve_p49(sieveSize):
    # Returns a list of prime numbers calculated using
    # the Sieve of Eratosthenes algorithm.

    sieve = [True] * sieveSize
    sieve[0] = False  # zero and one are not prime numbers
    sieve[1] = False

    # create the sieve
    for i in range(2, int(sqrt(sieveSize)) + 1):
        pointer = i * 2
        while pointer < sieveSize:
            sieve[pointer] = False
            pointer += i

    for i in range(0, 1000 + 1):
        sieve[i] = False
    # compile the list of primes
    primes = []
    for i in range(sieveSize):
        if sieve[i] is True:
            primes.append(i)

    return primes


def p49():
    primes = prime_sieve_p49(9999)
    d = []
    for prime in primes:
        perms = list(permutations(str(prime)))
        perm_set = set()
        for perm in perms:
            num = int(''.join(perm))
            if 999 < num < 10000:
                if is_prime(num):
                    perm_set.add(num)
        if len(perm_set) < 3:
            continue
        p = list(perm_set)
        for i in range(1, len(p) - 1):
            diff1 = abs(p[i] - p[i - 1])
            for j in range(i + 2, len(p)):
                diff2 = abs(p[i] - p[j])
                if diff1 == diff2:
                    d.append(sorted([p[i], p[j], p[i - 1]]))
    res_d = []
    for check_d in d:
        if check_d not in res_d:
            res_d.append(check_d)
    print(res_d)


'''
Problem 50
The prime 41, can be written as the sum of six consecutive primes:
41 = 2 + 3 + 5 + 7 + 11 + 13
This is the longest sum of consecutive primes that adds to a prime below one-hundred.
The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.
Which prime, below one-million, can be written as the sum of the most consecutive primes?
'''


def p50():
    primes = prime_sieve(10000)
    prime_len = len(primes)
    sum_p = 0
    max_sum_p = 0
    max_term = 0
    for i in range(0, prime_len):
        term = 0
        sum_p = primes[i]
        for j in range(i + 1, prime_len):
            term += 1
            sum_p += primes[j]
            if sum_p > 1000000:
                continue
            if is_prime(sum_p):
                if max_term < term:
                    max_term = term
                    if max_sum_p < sum_p:
                        max_sum_p = sum_p
                        print([i], [max_term], max_sum_p)


'''
Problem 51
By replacing the 1st digit of the 2-digit number *3,
it turns out that six of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.
By replacing the 3rd and 4th digits of 56**3 with the same digit,
this 5-digit number is the first example having seven primes among the ten generated numbers,
yielding the family: 56003, 56113, 56333, 56443, 56663, 56773, and 56993. Consequently 56003,
being the first member of this family, is the smallest prime with this property.
Find the smallest prime which, by replacing part of the number (not necessarily adjacent digits) with the same digit,
is part of an eight prime value family.
'''


def check_prime_cnt(idx, prime_str, primes):
    d = {}
    p_found = []
    for i in range(len(prime_str)):
        if prime_str[i] == str(idx):
            p_found.append(i)

    comb = combinations(p_found, 2)
    for c in comb:
        cnt = 0
        temp = list(map(str, prime_str))
        for i in range(0, 10):
            if i == 0:
                if c[0] == 0 or c[1] == 0:
                    continue
            # if (9 - i) + cnt < 8:
                # break
            temp[c[0]] = str(i)
            temp[c[1]] = str(i)
            if int(''.join(temp)) in primes:
                cnt += 1
                d[int(''.join(temp))] = cnt
    if len(d) == 0:
        return 0
    if 5 < d[max(d, key=d.get)]:
        print(prime_str, d[max(d, key=d.get)])
    return d[max(d, key=d.get)]


def check_prime(start, prime_str):
    p_zero = []
    for i in range(len(prime_str)):
        if prime_str[i] == str(start):
            p_zero.append(i)

    comb = combinations(p_zero, 2)
    for c in comb:
        ret = []
        cnt = 1
        temp = list(map(str, prime_str))
        for i in range(0, 10):
            if i == 0:
                if c[0] == 0 or c[1] == 0:
                    continue
            temp[c[0]] = str(i)
            temp[c[1]] = str(i)
            if is_prime(int(''.join(temp))):
                cnt += 1
                ret.append(int(''.join(temp)))
        print(ret, len(ret))


def p51():
    # a = 205201
    # check_prime(1, str(a))
    # return
    all_primes = prime_sieve(10000000)
    primes = []
    for p in all_primes:
        str_p = str(p)
        if len(str_p) == len(set(str_p)):
            continue
        primes.append(p)

    prime_len = len(primes)
    for i in range(80132, prime_len):  # primes[5780] = 56693
        prime_str = str(primes[i])
        prime_zero_cnt = prime_str.count('0')
        if prime_zero_cnt >= 2:
            if check_prime_cnt(0, prime_str, primes) == 8:
                print('[51]: ', primes[i])
                return
        prime_zero_cnt = prime_str.count('1')
        if prime_zero_cnt >= 2:
            if check_prime_cnt(1, prime_str, primes) == 8:
                print('[51]: ', primes[i])
                return

        prime_zero_cnt = prime_str.count('2')
        if prime_zero_cnt >= 2:
            if check_prime_cnt(2, prime_str, primes) == 8:
                print('[51]: ', primes[i])
                return


'''
Problem 52
It can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order.
Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x, contain the same digits.
'''


def p52():
    i = 125875
    while(1):
        str_i = str(i)
        if len(str_i) != len(set(str_i)):
            i += 1
            continue
        comp_num = sorted(str_i)
        for j in range(2, 7):
            if comp_num != sorted(str(i * j)):
                break
            else:
                if j == 6:
                    print('[52]: ', i)
                    return
        if(str_i[0] != '1'):  # MUST number start 1
            i *= 5  # 2000 * 5 = 10000
        else:
            i += 1


'''
Problem 53
There are exactly ten ways of selecting three from five, 12345:
123, 124, 125, 134, 135, 145, 234, 235, 245, and 345
In combinatorics, we use the notation, 5C3 = 10.
In general,

nCr = n!r!(n−r)!
,where r ≤ n, n! = n×(n−1)×...×3×2×1, and 0! = 1.

It is not until n = 23, that a value exceeds one-million: 23C10 = 1144066.
How many, not necessarily distinct, values of  nCr, for 1 ≤ n ≤ 100, are greater than one-million?
'''


def p53():
    ret = []
    for r in range(1, 101):
        for n in range(r, 101):
            c = (factorial(n) / (factorial(r) * factorial(n - r)))
            if c > 1000000:
                ret.append(str(n) + str(r))
    print('[53]: ', len(ret))


'''
Problem 54
In the card game poker, a hand consists of five cards and are ranked,
from lowest to highest, in the following way:

    High Card: Highest value card.
    One Pair: Two cards of the same value.
    Two Pairs: Two different pairs.
    Three of a Kind: Three cards of the same value.
    Straight: All cards are consecutive values.
    Flush: All cards of the same suit.
    Full House: Three of a kind and a pair.
    Four of a Kind: Four cards of the same value.
    Straight Flush: All cards are consecutive values of same suit.
    Royal Flush: Ten, Jack, Queen, King, Ace, in same suit.

The cards are valued in the order:2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace.
If two players have the same ranked hands then the rank made up of the highest value wins;
    for example, a pair of eights beats a pair of fives (see example 1 below).
But if two ranks tie,
    for example, both players have a pair of queens,
    then highest cards in each hand are compared (see example 4 below);
    if the highest cards tie then the next highest cards are compared, and so on.

Consider the following five hands dealt to two players:

Hand Player 1 Player 2 Winner
1 5H 5C 6S 7S KDPair of Fives 2C 3S 8S 8D TDPair of Eights Player 2
2 5D 8C 9S JS ACHighest card Ace 2C 5C 7D 8S QHHighest card Queen Player 1
3 2D 9C AS AH ACThree Aces 3D 6D 7D TD QDFlush  with Diamonds Player 2
4 4D 6S 9H QH QCPair of QueensHighest card Nine 3D 6D 7H QD QSPair of QueensHighest card Seven Player 1
5 2H 2D 4C 4D 4SFull HouseWith Three Fours 3C 3D 3S 9S 9DFull Housewith Three Threes Player 1

The file, poker.txt, contains one-thousand random hands dealt to two players.
Each line of the file contains ten cards (separated by a single space):
the first five are Player 1's cards and the last five are Player 2's cards.
You can assume that all hands are valid (no invalid characters or repeated cards),
each player's hand is in no specific order, and in each hand there is a clear winner.
How many hands does Player 1 win?
'''


ROYAL_FLUSH = 110
STRAIGHT_FLUSH = 109
FOUR_OF_KIND = 108
FULL_HOUSE = 107
FLUSH = 106
STRAIGHT = 105
THREE_OF_KIND = 104
TWO_PAIR = 103
ONE_PAIR = 102


def pocker_point(card):
    # 스-다-하-클
    nums = []
    suit = []
    for c in card:  # pocker.txt does not have 10
        if c[0] == 'T':
            nums.append(10)
        elif c[0] == 'J':
            nums.append(11)
        elif c[0] == 'Q':
            nums.append(12)
        elif c[0] == 'K':
            nums.append(13)
        elif c[0] == 'A':
            nums.append(14)
        else:
            nums.append(int(c[0]))
        suit.append(c[1])
    nums = sorted(nums)
    suit = sorted(suit)
    # print(nums, suit)
    if nums == ['10', '11', '12', '13', '14'] and len(set(suit)) == 1:
        return ROYAL_FLUSH, 14, 0  # Royal Flush
    elif len(set(suit)) == 1:
        if ( int(nums[0]) + 1 == int(nums[1]) and
             int(nums[1]) + 1 == int(nums[2]) and
             int(nums[2]) + 1 == int(nums[3]) and
             int(nums[3]) + 1 == int(nums[4])):
            return STRAIGHT_FLUSH, nums[4], nums[3]
        else:
            return FLUSH, max(nums), 0
    elif ( nums[0] == nums[3] or
           nums[1] == nums[4]):
        return FOUR_OF_KIND, nums[2], 0
    elif len(set(nums)) == 2:
        d = {}
        for n in nums:
            d[n] = d.get(n, 0) + 1
        return FULL_HOUSE, d[max(d, key=d.get)], d[min(d, key=d.get)]
    elif ( int(nums[0]) + 1 == int(nums[1]) and
           int(nums[1]) + 1 == int(nums[2]) and
           int(nums[2]) + 1 == int(nums[3]) and
           int(nums[3]) + 1 == int(nums[4])):
        return STRAIGHT, nums[4], 0
    elif ( nums[0] == nums[2] or
           nums[1] == nums[3] or
           nums[2] == nums[4]):
        return THREE_OF_KIND, nums[2]
    elif len(set(nums)) == 3:
        return TWO_PAIR, nums[3], 0
    elif len(set(nums)) == 4:
        max_num = 0
        if nums[0] == nums[1]:
            max_num = nums[1]
        elif nums[1] == nums[2]:
            max_num = nums[2]
        elif nums[2] == nums[3]:
            max_num = nums[3]
        elif nums[3] == nums[4]:
            max_num = nums[4]
        return ONE_PAIR, max_num, 0
    else:
        return nums[4], nums[4], 0


def p54():
    return
    p1_win = 0
    with open('pocker.txt') as f:
        for line in f:
            p = line.strip('\n').split(' ')
            p1, max_p1, pp1 = pocker_point(p[:5])
            p2, max_p2, pp2 = pocker_point(p[5:])
            print(p1, p2, p[:5], p[5:])
            if p1 > p2:
                p1_win += 1
            elif p1 == p2:
                if max_p1 > max_p2:
                    p1_win += 1
                elif max_p1 == max_p2:
                    if pp1 > pp2:
                        p1_win += 1
                    else:
                        print(line)  # need compare h/d/c/s
    print('[54]: ', p1_win)


'''
Problem 55
If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.
Not all numbers produce palindromes so quickly. For example,
349 + 943 = 1292,
1292 + 2921 = 4213
4213 + 3124 = 7337
That is, 349 took three iterations to arrive at a palindrome.
Although no one has proved it yet, it is thought that some numbers, like 196,
never produce a palindrome.
A number that never forms a palindrome through the reverse and add process is called a Lychrel number.

Due to the theoretical nature of these numbers, and for the purpose of this problem,
we shall assume that a number is Lychrel until proven otherwise.
In addition you are given that for every number below ten-thousand,
it will either
    (i) become a palindrome in less than fifty iterations, or,
    (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome.
In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome:
    4668731596684224866951378664 (53 iterations, 28-digits).
Surprisingly, there are palindromic numbers that are themselves Lychrel numbers;
the first example is 4994.
How many Lychrel numbers are there below ten-thousand?
NOTE: Wording was modified slightly on 24 April 2007 to emphasise the theoretical nature of Lychrel numbers.
'''


def check_lychrel(n):
    print(n)
    for i in range(1, 51):
        n = n + int(str(n)[::-1])
        print(n)


def p55():
    ret = []
    # https://en.wikipedia.org/wiki/Lychrel_number
    for i in range(196, 10001):
        num = i
        for j in range(1, 51):
            num = num + int(str(num)[::-1])
            if is_palindromic(num):
                ret.append(i)
                break
    print(ret)
    print(len(ret))

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import math
from util import fib, is_palindromic


'''
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
'''


def f1_great():  # O(1)
    total = 0
    for i in range(1000):
        if i % 3 == 0 or i % 5 == 0:
            total += i
    print('[1]: ', total)


def f1():  # O(1)
    i, j, k = 3, 5, 3*5
    total = 0
    while (i < 1000):
        total += i
        i += 3
    while (j < 1000):
        total += j
        j += 5
    while (k < 1000):
        total -= k
        k += 15
    print('[1]: ', total)


'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''


def f2():  # O(1)
    # odd + even  = odd
    # odd + odd = even
    # -----------------------
    # [0][1][2][3][4][5][6][7][8][9]
    #  0  1  1  2  3  5  8 13 21 34
    #           e        e       e
    # index 3 * n is even number
    i = 3
    total = 0
    while (1):
        f = fib(i)
        if f > 4000000:
            break
        total += f
        i += 3
    print('[2]: ', total)


'''
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
'''


def largest_prime_factor(n):  # O(log2)
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:  # n % i == 0
            n //= i
    if n > 1:
        return n
    return i


def f3():
    n = 600851475143
    print('[3]: ', largest_prime_factor(n))


'''
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
Find the largest palindrome made from the product of two 3-digit numbers.
'''


def f4():  # O(1)
    limit = 999 * 999  # two 3-digit numbers (998001)
    for i in range(limit, 1, -1):
        if is_palindromic(str(i)) is False:
            continue
        for j in range(int(math.sqrt(i)), 0, -1):
            if i % j == 0:
                break
        if j // 1000 == 0 and i/j // 1000 == 0:
            break
    print('[4]: ', i)

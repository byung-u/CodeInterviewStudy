#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import math
from functools import reduce

from util import fib, is_palindromic, prime_sieve


'''
Problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
'''


def p1_great():  # O(1)
    total = 0
    for i in range(1000):
        if i % 3 == 0 or i % 5 == 0:
            total += i
    print('[1]: ', total)


def p1():  # O(1)
    i, j, k = 3, 5, 3*5
    total = 0
    while (i < 1000):
        total += i
        i += 3
    while (j < 1000):
        total += j
        j += 5
    while (k < 1000):
        total -= k
        k += 15
    print('[1]: ', total)


'''
Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''


def p2():  # O(1)
    # odd + even  = odd
    # odd + odd = even
    # -----------------------
    # [0][1][2][3][4][5][6][7][8][9]
    #  0  1  1  2  3  5  8 13 21 34
    #           e        e       e
    # index 3 * n is even number
    i = 3
    total = 0
    while (1):
        f = fib(i)
        if f > 4000000:
            break
        total += f
        i += 3
    print('[2]: ', total)


'''
Problem 3
The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
'''


def largest_prime_factor(n):  # O(log2)
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:  # n % i == 0
            n //= i
    if n > 1:
        return n
    return i


def p3():
    n = 600851475143
    print('[3]: ', largest_prime_factor(n))


'''
Problem 4
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.
'''


def p4():  # O(1)
    limit = 999 * 999  # two 3-digit numbers (998001)
    for i in range(limit, 1, -1):
        if is_palindromic(str(i)) is False:
            continue
        for j in range(int(math.sqrt(i)), 0, -1):
            if i % j == 0:
                break
        if j // 1000 == 0 and i/j // 1000 == 0:
            break
    print('[4]: ', i)


'''
Problem 5
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
'''


def p5_awesome():
    print('[5]: ', (2**4 * 3**2 * 5 * 7 * 11 * 13 * 17 * 19))
    '''
    https://www.mathsisfun.com/prime-factorization.html
    Use prime factorization
        20 = 2^2 * 5
        19 = 19
        18 = 3^2 * 2
        17 = 17
        16 = 2^4
        15 = 3 * 5
        14 = 2 * 7
        13 = 13
        12 = 2^2 * 3
        11 = 11
        10 = 2 * 5
        9 = 3^2
        8 = 2^3
        7 = 7
        6 = 2 * 3
        5 = 5
        4 = 2^2
        3 = 3
        2 = 2
    '''


def p5():
    # Brute force, too bad logic
    num = 2520
    while (1):
        for d in range(20, 1, -1):
            if num % d != 0:
                break
        if d == 2:
            print('[5]: ', num)
            return
        num += 10


'''
Problem 6
The sum of the squares of the first ten natural numbers is,
12 + 22 + ... + 102 = 385
The square of the sum of the first ten natural numbers is,
(1 + 2 + ... + 10)2 = 552 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

'''


def p6_awesome():
    n = 100
    square_of_sum = (n**2 * (n+1)**2) / 4
    sum_of_squares = (n * (n+1) * ((2*n)+1)) / 6
    print('[6]: ', square_of_sum - sum_of_squares)
    '''
    (1 + 2 + ... + n)^2 = n^2 * (n+1)^2 * 1/4
    1^2 + 2^2 + ... + n^2 = n * (n+1) * (2n+1) * 1/6
    '''


def p6_awesome2():
    n = 100
    print('[6]: ', ((3 * (n**4)) + (2 * n**3) - (3 * n**2) - (2 * n))/12)
    '''
    ( 3 * n^4 + 2 * n^3 -3 * n^2 - 2 * n )/12
    '''


def p6():  # O(n)
    INPUT = 100
    square_of_sum = (sum(range(1, INPUT+1)) ** 2)

    add = 1
    square = 0
    sum_of_squares = 0
    for i in range(1, INPUT+1):
        square += add
        sum_of_squares += square
        add += 2
    print('[6]: ', square_of_sum - sum_of_squares)


'''
Problem 7

By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10,001st prime number?

'''
def p7():
    '''
     http://primes.utm.edu/lists/small/
    '''
    # With sieve algorithm
    sieveSize = 200100
    sieve = [True] * sieveSize
    sieve[0] = False 
    sieve[1] = False

    for i in range(2, int(math.sqrt(sieveSize)) + 1):
        pointer = i * 2
        while pointer < sieveSize:
            sieve[pointer] = False
            pointer += i

    cnt = 0
    for i in range(sieveSize):
        if sieve[i] == True:
            cnt += 1
            if (cnt == 10001):
                print('[7]: ', i)
                break


'''
Problem 8

The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

'''


def p8():
    digit = '''
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
'''
    COUNT = 13
    digit = digit.replace('\n', '')
    print(max([reduce(lambda x, y: x * y, list(map(int, digit[i:i+COUNT]))) for i in range(0, len(digit)-COUNT)]))
    # - Last code -
    # max_num = 0
    # for i in range(0, len(digit)-COUNT):
    #    result = reduce(lambda x, y: x * y, list(map(int, digit[i:i+COUNT])))
    #    if max_num < result:
    #        max_num = result
    # print('[8]: ', max_num)


'''
Problem 9

A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
 a^2 + b^2 = c^2
For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
There exists exactly one Pythagorean triplet for which a + b + c = 1000.Find the product abc.

'''

import numpy as np
# http://mathworld.wolfram.com/PythagoreanTriple.html
def gen_prim_pyth_trips(limit=None):
    u = np.mat(' 1  2  2; -2 -1 -2; 2 2 3')
    a = np.mat(' 1  2  2;  2  1  2; 2 2 3')
    d = np.mat('-1 -2 -2;  2  1  2; 2 2 3')
    uad = np.array([u, a, d])
    m = np.array([3, 4, 5])
    while m.size:
        m = m.reshape(-1, 3)
        if limit:
            m = m[m[:, 2] <= limit]
        yield from m
        m = np.dot(m, uad)


def gen_all_pyth_trips(limit):
    for prim in gen_prim_pyth_trips(limit):
        i = prim
        for _ in range(limit//prim[2]):
            yield i
            i = i + prim
            # limit = 1000, prim[2] = 265
            # [ 23 264 265] 1000/265=3
            # [ 23 264 265] -> 1
            # [ 46 528 530] -> 2
            # [ 69 792 795] -> 3


def p9():
    tr = list(gen_all_pyth_trips(1000))
    for t in tr:
        if sum(t) == 1000:
            print('[9]: ', reduce(lambda x, y: x * y, t))


'''
Problem 10

The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.

'''


def p10():
    print('[10] ', sum(prime_sieve(2000000)))


